import{_ as n,c as s,o as a,a as p}from"./app.65ba7c0f.js";const d='{"title":"\u65B9\u6CD5","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u65B9\u6CD5","slug":"\u65B9\u6CD5"},{"level":3,"title":"Code","slug":"code"},{"level":2,"title":"\u63A5\u53E3","slug":"\u63A5\u53E3"},{"level":3,"title":"Code","slug":"code-1"},{"level":2,"title":"\u5E38\u7528\u63A5\u53E3","slug":"\u5E38\u7528\u63A5\u53E3"},{"level":3,"title":"Code","slug":"code-2"},{"level":3,"title":"\u7EC3\u4E60","slug":"\u7EC3\u4E60"},{"level":2,"title":"\u5C0F\u7ED3","slug":"\u5C0F\u7ED3"}],"relativePath":"go/travel/MethodsAndInterface.md"}',t={},o=p(`<h2 id="\u65B9\u6CD5" tabindex="-1">\u65B9\u6CD5</h2><ul><li>Go \u6CA1\u6709\u7C7B\uFF0C\u4E0D\u8FC7\u53EF\u4EE5\u5B9A\u4E49\u65B9\u6CD5</li><li>\u65B9\u6CD5\u5C31\u662F\u4E00\u7C7B\u5E26<code>\u63A5\u6536\u8005</code>\u53C2\u6570\u7684\u51FD\u6570 <ul><li><code>func (receiver Type) name() returnType {}</code></li><li>\u63A5\u6536\u8005\u7684\u7C7B\u578B\u5B9A\u4E49\u548C\u65B9\u6CD5\u58F0\u660E\u5FC5\u987B\u5728\u540C\u4E00\u5305\u5185</li></ul></li><li>\u63A5\u6536\u8005\u7684\u7C7B\u578B <ul><li>\u503C <ul><li>\u7C7B\u578B\u522B\u540D</li><li>\u7ED3\u6784\u4F53</li></ul></li><li>\u6307\u9488</li><li>\u4E24\u8005\u5173\u7CFB <ul><li>\u503C\u63A5\u6536\u8005\u5BF9\u539F\u59CB\u6570\u636E\u7684\u526F\u672C\u8FDB\u884C\u64CD\u4F5C\uFF0C\u6307\u9488\u63A5\u6536\u8005\u4FEE\u6539\u539F\u503C</li><li>\u7531\u4E8E\u65B9\u6CD5\u7ECF\u5E38\u9700\u8981\u4FEE\u6539\u5B83\u7684\u63A5\u6536\u8005\uFF0C\u6307\u9488\u63A5\u6536\u8005\u6BD4\u503C\u63A5\u6536\u8005\u66F4\u5E38\u7528</li></ul></li></ul></li><li>\u4EE5\u6307\u9488\u6216\u503C\u4E3A\u63A5\u6536\u8005\u7684<strong>\u65B9\u6CD5</strong>\u88AB\u8C03\u7528\u65F6\uFF0C\u63A5\u6536\u8005\u65E2\u80FD\u4E3A\u503C\u53C8\u80FD\u4E3A\u6307\u9488\u3002\u800C\u5E26\u6307\u9488\u6216\u503C\u53C2\u6570\u7684<strong>\u51FD\u6570</strong>\u5219\u53EA\u80FD\u63A5\u6536\u5BF9\u5E94\u7C7B\u578B\u3002</li></ul><h3 id="code" tabindex="-1">Code</h3><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// ...</span>
<span class="token keyword">type</span> Vertex <span class="token keyword">struct</span> <span class="token punctuation">{</span>
  X<span class="token punctuation">,</span>Y <span class="token builtin">float64</span>
<span class="token punctuation">}</span>
<span class="token keyword">type</span> MyFloat <span class="token builtin">float64</span>
<span class="token comment">// \u65B9\u6CD5\u793A\u4F8B</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>Vertex<span class="token punctuation">)</span> <span class="token function">Scale</span><span class="token punctuation">(</span>f <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> v<span class="token punctuation">.</span>X <span class="token operator">=</span> v<span class="token punctuation">.</span>X <span class="token operator">*</span> f<span class="token punctuation">;</span>v<span class="token punctuation">.</span>Y <span class="token operator">=</span> v<span class="token punctuation">.</span>Y <span class="token operator">*</span> f<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token comment">// \u6307\u9488\u63A5\u6536\u8005</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>v Vertex<span class="token punctuation">)</span> <span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>X<span class="token operator">*</span>v<span class="token punctuation">.</span>X <span class="token operator">+</span> v<span class="token punctuation">.</span>Y<span class="token operator">*</span>v<span class="token punctuation">.</span>Y<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment">// \u7ED3\u6784\u4F53\u63A5\u6536\u8005</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>f MtFloat<span class="token punctuation">)</span> <span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span> <span class="token keyword">if</span> f <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token operator">-</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token function">float64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment">// \u7C7B\u578B\u522B\u540D\u63A5\u6536\u8005</span>
<span class="token comment">// \u51FD\u6570\u7248\u672C</span>
<span class="token keyword">func</span> <span class="token function">Abs</span><span class="token punctuation">(</span>v Vertex<span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>X<span class="token operator">*</span>v<span class="token punctuation">.</span>X <span class="token operator">+</span> v<span class="token punctuation">.</span>Y<span class="token operator">*</span>v<span class="token punctuation">.</span>Y<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token function">ScaleFunc</span><span class="token punctuation">(</span>v <span class="token operator">*</span>Vertex<span class="token punctuation">,</span> f <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> v<span class="token punctuation">.</span>X <span class="token operator">=</span> v<span class="token punctuation">.</span>X <span class="token operator">*</span> f<span class="token punctuation">;</span>v<span class="token punctuation">.</span>Y <span class="token operator">=</span> v<span class="token punctuation">.</span>Y <span class="token operator">*</span> f<span class="token punctuation">;</span> <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  v <span class="token operator">:=</span> Vertex<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>
  v<span class="token punctuation">.</span><span class="token function">Scale</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">// v { 30, 40 }</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">Abs</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
  <span class="token comment">// \u65B9\u6CD5\u4E0E\u51FD\u6570</span>
  v <span class="token operator">:=</span> Vertex<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>
  v<span class="token punctuation">.</span><span class="token function">Scale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">// Go\u4F1A\u81EA\u52A8\u89E3\u6790\u4E3A (&amp;v).Scale(2),\u8FD9\u53EB\u505A\u6307\u9488\u91CD\u5B9A\u5411</span>
  <span class="token function">ScaleFunc</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>v<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>

  p <span class="token operator">:=</span> <span class="token operator">&amp;</span>Vertex<span class="token punctuation">{</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span>
  p<span class="token punctuation">.</span><span class="token function">Scale</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
  <span class="token function">ScaleFunc</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// (*p).Abs()</span>

  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> p<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="\u63A5\u53E3" tabindex="-1">\u63A5\u53E3</h2><ul><li><strong>\u63A5\u53E3\u7C7B\u578B</strong>\xA0 \u662F\u7531\u4E00\u7EC4\u65B9\u6CD5\u7B7E\u540D\u5B9A\u4E49\u7684\u96C6\u5408</li><li>\u63A5\u53E3\u7C7B\u578B\u7684\u53D8\u91CF\u53EF\u4EE5\u4FDD\u5B58\u4EFB\u4F55\u5B9E\u73B0\u4E86\u8FD9\u4E9B\u65B9\u6CD5\u7684\u503C</li><li>\u9690\u5F0F\u5B9E\u73B0\uFF1A<code>func (t T) IContent() {}</code>\uFF0C\u8FD9\u8868\u660E\u7C7B\u578B <code>T</code> \u5B9E\u73B0\u4E86\u63A5\u53E3 <code>I</code>,\u6CE8\u610F\u5230\u6CA1\u6709\u4F7F\u7528<code>implements</code>\u5173\u952E\u5B57</li><li>\u63A5\u53E3\u503C <ul><li>\u63A5\u53E3\u503C\u53EF\u4EE5\u7528\u4F5C\u51FD\u6570\u7684\u53C2\u6570\u6216\u8FD4\u56DE\u503C</li><li>\u5728\u5185\u90E8\uFF0C\u63A5\u53E3\u503C\u53EF\u4EE5\u770B\u505A\u5305\u542B\u503C\u548C\u5177\u4F53\u7C7B\u578B\u7684\u5143\u7EC4\uFF1A<code>(value, type)</code></li><li>\u6307\u5B9A\u4E86\u96F6\u4E2A\u65B9\u6CD5\u7684\u63A5\u53E3\u503C\u88AB\u79F0\u4E3A \u7A7A\u63A5\u53E3\u3002\u7A7A\u63A5\u53E3\u88AB\u7528\u6765\u5904\u7406\u672A\u77E5\u7C7B\u578B\u7684\u503C\u3002</li></ul></li><li>\u7C7B\u578B\u65AD\u8A00\u63D0\u4F9B\u4E86\u8BBF\u95EE\u63A5\u53E3\u503C\u5E95\u5C42\u5177\u4F53\u503C\u7684\u65B9\u5F0F\uFF1A<code>t, ok := i.(T)</code>,\u5C06\u63A5\u53E3 <code>i</code> \u5E95\u5C42\u7C7B\u578B\u4E3A \xA0<code>T</code>\xA0 \u7684\u503C\u8D4B\u4E88\u53D8\u91CF \xA0<code>t</code></li><li>\u7C7B\u578B\u9009\u62E9\u662F\u4E00\u79CD\u6309\u987A\u5E8F\u4ECE\u51E0\u4E2A\u7C7B\u578B\u65AD\u8A00\u4E2D\u9009\u62E9\u5206\u652F\u7684\u7ED3\u6784\uFF0C\u5373\u7279\u6B8A\u7684 switch\uFF1A<code>switch v := i.(type) { }</code><ul><li><code>i</code> \u662F\u63A5\u53E3\u503C,<code>type</code> \u662F\u5173\u952E\u5B57</li></ul></li></ul><h3 id="code-1" tabindex="-1">Code</h3><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// ...</span>

<span class="token keyword">type</span> Abser <span class="token keyword">interface</span> <span class="token punctuation">{</span>
	<span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> a Abser
  f <span class="token operator">:=</span> <span class="token function">MyFloat</span><span class="token punctuation">(</span><span class="token operator">-</span>math<span class="token punctuation">.</span>Sqrt2<span class="token punctuation">)</span>
  v <span class="token operator">:=</span> Vertex<span class="token punctuation">{</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span>
  <span class="token comment">// \u8D4B\u503C</span>
  a <span class="token operator">=</span> f  <span class="token comment">// a MyFloat \u5B9E\u73B0\u4E86 Abser</span>
  a <span class="token operator">=</span> <span class="token operator">&amp;</span>v <span class="token comment">// a *Vertex \u5B9E\u73B0\u4E86 Abser,\u800C a = v \u4E0D\u884C\uFF0C\u56E0\u4E3A v \u662F Vertex \u7C7B\u578B\uFF0C\u800C Vertex \u6CA1\u6709\u5B9E\u73B0 Abs \u65B9\u6CD5</span>

  <span class="token comment">// \u67E5\u770B\u63A5\u53E3\u503C</span>
  a <span class="token operator">=</span> <span class="token operator">&amp;</span>Vertex<span class="token punctuation">{</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">}</span>
  <span class="token function">describe</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">// (&amp;{3 4}, *main.Vertex)</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  a <span class="token operator">=</span> <span class="token function">MyFloat</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>Pi<span class="token punctuation">)</span>
  <span class="token function">describe</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">// (3.141592653589793, main.MyFloat)</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

  <span class="token comment">// \u7C7B\u578B\u65AD\u8A00</span>
  <span class="token keyword">var</span> i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span>
  s<span class="token punctuation">,</span> ok <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">string</span><span class="token punctuation">)</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token comment">// hello true</span>
  f<span class="token punctuation">,</span> ok <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">)</span>
  fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> ok<span class="token punctuation">)</span><span class="token comment">// 0 false</span>

  <span class="token comment">// \u7C7B\u578B\u9009\u62E9</span>
  <span class="token function">do</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span>     <span class="token comment">// Twice 21 is 42</span>
  <span class="token function">do</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token comment">// &quot;hello&quot; is 5 bytes long</span>
  <span class="token function">do</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>   <span class="token comment">// I don&#39;t know about type bool!</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> MyFloat <span class="token builtin">float64</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>f MyFloat<span class="token punctuation">)</span> <span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span> <span class="token comment">// MyFloat \u5B9E\u73B0\u4E86 Abser</span>
	<span class="token keyword">if</span> f <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token function">float64</span><span class="token punctuation">(</span><span class="token operator">-</span>f<span class="token punctuation">)</span> <span class="token punctuation">}</span>
	<span class="token keyword">return</span> <span class="token function">float64</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> Vertex <span class="token keyword">struct</span> <span class="token punctuation">{</span> X<span class="token punctuation">,</span> Y <span class="token builtin">float64</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>v <span class="token operator">*</span>Vertex<span class="token punctuation">)</span> <span class="token function">Abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">float64</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> math<span class="token punctuation">.</span><span class="token function">Sqrt</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>X<span class="token operator">*</span>v<span class="token punctuation">.</span>X <span class="token operator">+</span> v<span class="token punctuation">.</span>Y<span class="token operator">*</span>v<span class="token punctuation">.</span>Y<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token comment">// \u63A5\u53E3\u503C</span>
<span class="token keyword">func</span> <span class="token function">describe</span><span class="token punctuation">(</span>a Abser<span class="token punctuation">)</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;(%v, %T)\\n&quot;</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token comment">// \u7C7B\u578B\u9009\u62E9</span>
<span class="token keyword">func</span> <span class="token function">do</span><span class="token punctuation">(</span>i <span class="token keyword">interface</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">switch</span> v <span class="token operator">:=</span> i<span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">case</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;Twice %v is %v\\n&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> v<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span>
	<span class="token keyword">case</span> <span class="token builtin">string</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%q is %v bytes long\\n&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">,</span> <span class="token function">len</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span>
	<span class="token keyword">default</span><span class="token punctuation">:</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;I don&#39;t know about type %T!\\n&quot;</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br></div></div><h2 id="\u5E38\u7528\u63A5\u53E3" tabindex="-1">\u5E38\u7528\u63A5\u53E3</h2><ul><li><code>Stringer</code> \u662F\u4E00\u4E2A\u53EF\u4EE5\u7528\u5B57\u7B26\u4E32\u63CF\u8FF0\u81EA\u5DF1\u7684\u7C7B\u578B\uFF1A<code>type Stringer interface { String() string }</code><ul><li>\u53EF\u4EE5\u901A\u8FC7\u6B64\u63A5\u53E3\u6765\u6253\u5370\u503C</li></ul></li><li><code>error</code> \u8868\u793A\u9519\u8BEF\u72B6\u6001\uFF1A<code>type error interface { Error() string }</code></li><li><code>Reader</code><ul><li><code>io</code>\xA0 \u5305\u6307\u5B9A\u4E86 \xA0<code>io.Reader</code>\xA0 \u63A5\u53E3\uFF0C\u5B83\u8868\u793A\u4ECE\u6570\u636E\u6D41\u7684\u672B\u5C3E\u8FDB\u884C\u8BFB\u53D6</li><li><code>func (T) Read(b []byte) (n int, err error)</code><ul><li><code>n</code> \u8868\u793A\u8981\u8BFB\u53D6\u7684\u5B57\u8282\u957F\uFF0C\u9ED8\u8BA4\u662F\u5B57\u8282\u5207\u7247\u7684\u957F\u5EA6</li></ul></li></ul></li><li><code>Image</code><ul><li><a href="https://go-zh.org/pkg/image/#Image" target="_blank" rel="noopener noreferrer"><code>image</code></a>\xA0 \u5305\u5B9A\u4E49\u4E86 \xA0<code>Image</code>\xA0 \u63A5\u53E3</li></ul></li></ul><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">type</span> Image <span class="token keyword">interface</span> <span class="token punctuation">{</span>
    <span class="token function">ColorModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> color<span class="token punctuation">.</span>Model
    <span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> Rectangle
    <span class="token function">At</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> color<span class="token punctuation">.</span>Color
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="code-2" tabindex="-1">Code</h3><div class="language-go line-numbers-mode"><pre><code><span class="token comment">// ...</span>

<span class="token keyword">type</span> Person <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	Name <span class="token builtin">string</span>
	Age  <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> MyError <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	When time<span class="token punctuation">.</span>Time
	What <span class="token builtin">string</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>p Person<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%v (%v years)&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">.</span>Name<span class="token punctuation">,</span> p<span class="token punctuation">.</span>Age<span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>e <span class="token operator">*</span>MyError<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;at %v, %s&quot;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>When<span class="token punctuation">,</span> e<span class="token punctuation">.</span>What<span class="token punctuation">)</span> <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">error</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">&amp;</span>MyError<span class="token punctuation">{</span> time<span class="token punctuation">.</span><span class="token function">Now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&quot;it didn&#39;t work&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	a <span class="token operator">:=</span> Person<span class="token punctuation">{</span><span class="token string">&quot;Arthur Dent&quot;</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">// Arthur Dent (42 years)</span>
	<span class="token keyword">if</span> err <span class="token operator">:=</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> err <span class="token operator">!=</span> <span class="token boolean">nil</span> <span class="token punctuation">{</span> fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><h3 id="\u7EC3\u4E60" tabindex="-1">\u7EC3\u4E60</h3><ol><li>Stringer</li></ol><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">type</span> IPAddr <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin">byte</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>ip IPAddr<span class="token punctuation">)</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;%v.%v.%v.%v&quot;</span><span class="token punctuation">,</span> ip<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ip<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ip<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ip<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	hosts <span class="token operator">:=</span> <span class="token keyword">map</span><span class="token punctuation">[</span><span class="token builtin">string</span><span class="token punctuation">]</span>IPAddr<span class="token punctuation">{</span>
		<span class="token string">&quot;loopback&quot;</span><span class="token punctuation">:</span>  <span class="token punctuation">{</span><span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token string">&quot;googleDNS&quot;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">for</span> name<span class="token punctuation">,</span> ip <span class="token operator">:=</span> <span class="token keyword">range</span> hosts <span class="token punctuation">{</span>
		fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;%v: %v\\n&quot;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token comment">// googleDNS: 8.8.8.8 loopback: 127.0.0.1</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ol start="2"><li>error</li></ol><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">type</span> ErrNegativeSqrt <span class="token builtin">float64</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>e ErrNegativeSqrt<span class="token punctuation">)</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
	<span class="token keyword">return</span> fmt<span class="token punctuation">.</span><span class="token function">Sprintf</span><span class="token punctuation">(</span><span class="token string">&quot;cannot Sqrt negative number: %v&quot;</span><span class="token punctuation">,</span> <span class="token function">float64</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">Sqrt</span><span class="token punctuation">(</span>x <span class="token builtin">float64</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">float64</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">{</span> <span class="token keyword">return</span>  x<span class="token punctuation">,</span> <span class="token function">ErrNegativeSqrt</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">}</span>
	<span class="token keyword">return</span> x<span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// 2 &lt;nil&gt;</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span><span class="token function">Sqrt</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// -2 cannot Sqrt negative number: -2</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><ol start="3"><li>Reader</li></ol><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;io&quot;</span>
	<span class="token string">&quot;os&quot;</span>
	<span class="token string">&quot;strings&quot;</span>
	<span class="token string">&quot;golang.org/x/tour/reader&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> MyReader <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r MyReader<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">&#39;A&#39;</span>
	<span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">nil</span>
<span class="token punctuation">}</span>

<span class="token keyword">type</span> rot13Reader <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	r io<span class="token punctuation">.</span>Reader
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">rot13</span><span class="token punctuation">(</span>b <span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token builtin">byte</span> <span class="token punctuation">{</span>
  <span class="token keyword">switch</span> <span class="token punctuation">{</span>
    <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token char">&#39;A&#39;</span> <span class="token operator">&lt;=</span> b <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> <span class="token char">&#39;M&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token char">&#39;a&#39;</span> <span class="token operator">&lt;=</span> b <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> <span class="token char">&#39;m&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		b <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">13</span>
    <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token char">&#39;M&#39;</span> <span class="token operator">&lt;</span> b <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> <span class="token char">&#39;Z&#39;</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token char">&#39;m&#39;</span> <span class="token operator">&lt;</span> b <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;=</span> <span class="token char">&#39;z&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
		b <span class="token operator">=</span> b <span class="token operator">-</span> <span class="token number">13</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> b
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>r rot13Reader<span class="token punctuation">)</span> <span class="token function">Read</span><span class="token punctuation">(</span>b <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	n<span class="token punctuation">,</span> e <span class="token operator">:=</span> r<span class="token punctuation">.</span>r<span class="token punctuation">.</span><span class="token function">Read</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">rot13</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">return</span> n<span class="token punctuation">,</span> e
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// \u4EA7\u751F\u4E00\u4E2A ASCII \u5B57\u7B26 \`&#39;A&#39;\` \u7684\u65E0\u9650\u6D41</span>
	reader<span class="token punctuation">.</span><span class="token function">Validate</span><span class="token punctuation">(</span>MyReader<span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
	<span class="token comment">// \u4E00\u4E2A\u5B9E\u73B0\u4E86 \`io.Reader\` \u5E76\u4ECE\u53E6\u4E00\u4E2A \`io.Reader\` \u4E2D\u8BFB\u53D6\u6570\u636E\u7684 \`rot13Reader\`</span>
	s <span class="token operator">:=</span> strings<span class="token punctuation">.</span><span class="token function">NewReader</span><span class="token punctuation">(</span><span class="token string">&quot;Lbh penpxrq gur pbqr!&quot;</span><span class="token punctuation">)</span>
	r <span class="token operator">:=</span> rot13Reader<span class="token punctuation">{</span>s<span class="token punctuation">}</span>
	io<span class="token punctuation">.</span><span class="token function">Copy</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>Stdout<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token comment">// You cracked the code!</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br></div></div><ol start="4"><li>image</li></ol><div class="language-go line-numbers-mode"><pre><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token punctuation">(</span>
	<span class="token string">&quot;golang.org/x/tour/pic&quot;</span>
	<span class="token string">&quot;image&quot;</span>
	<span class="token string">&quot;image/color&quot;</span>
<span class="token punctuation">)</span>

<span class="token keyword">type</span> Image <span class="token keyword">struct</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token punctuation">(</span>i Image<span class="token punctuation">)</span> <span class="token function">Bounds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> image<span class="token punctuation">.</span>Rectangle <span class="token punctuation">{</span> <span class="token keyword">return</span> image<span class="token punctuation">.</span><span class="token function">Rect</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>i Image<span class="token punctuation">)</span> <span class="token function">ColorModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> color<span class="token punctuation">.</span>Model <span class="token punctuation">{</span> <span class="token keyword">return</span> color<span class="token punctuation">.</span>RGBAModel <span class="token punctuation">}</span>
<span class="token keyword">func</span> <span class="token punctuation">(</span>i Image<span class="token punctuation">)</span> <span class="token function">At</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token builtin">int</span><span class="token punctuation">)</span> color<span class="token punctuation">.</span>Color <span class="token punctuation">{</span> <span class="token keyword">return</span> color<span class="token punctuation">.</span>RGBA<span class="token punctuation">{</span> <span class="token function">uint8</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">uint8</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	m <span class="token operator">:=</span> Image<span class="token punctuation">{</span><span class="token punctuation">}</span>
	pic<span class="token punctuation">.</span><span class="token function">ShowImage</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers-wrapper"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="\u5C0F\u7ED3" tabindex="-1">\u5C0F\u7ED3</h2><ul><li>\u65B9\u6CD5 <ul><li>\u662F\u4E00\u7C7B\u5E26<code>\u63A5\u6536\u8005</code>\u53C2\u6570\u7684\u51FD\u6570\uFF1A<code>func (receiver Type) name() returnType {}</code></li><li>\u63A5\u6536\u8005\u7684\u7C7B\u578B\u5B9A\u4E49\u548C\u65B9\u6CD5\u58F0\u660E\u5FC5\u987B\u5728\u540C\u4E00\u5305\u5185</li><li>\u63A5\u6536\u8005\u7684\u7C7B\u578B:\u503C/\u6307\u9488 <ul><li>\u533A\u522B:\u503C\u64CD\u4F5C\u526F\u672C\uFF0C\u6307\u9488\u64CD\u4F5C\u539F\u503C</li><li>\u6307\u9488\u91CD\u5B9A\u5411 <ul><li>\u4EE5\u6307\u9488\u6216\u503C\u4E3A\u63A5\u6536\u8005\u7684<strong>\u65B9\u6CD5</strong>\u88AB\u8C03\u7528\u65F6\uFF0C\u63A5\u6536\u8005\u65E2\u80FD\u4E3A\u503C\u53C8\u80FD\u4E3A\u6307\u9488</li><li>\u800C\u5E26\u6307\u9488\u6216\u503C\u53C2\u6570\u7684<strong>\u51FD\u6570</strong>\u5219\u53EA\u80FD\u63A5\u6536\u5BF9\u5E94\u7C7B\u578B</li></ul></li></ul></li></ul></li><li>\u63A5\u53E3 <ul><li>\u7C7B\u578B <ul><li>\u7531\u4E00\u7EC4\u65B9\u6CD5\u7B7E\u540D\u5B9A\u4E49\u7684\u96C6\u5408</li><li>\u63A5\u53E3\u7C7B\u578B\u7684\u53D8\u91CF\u53EF\u4EE5\u4FDD\u5B58\u4EFB\u4F55\u5B9E\u73B0\u4E86\u8FD9\u4E9B\u65B9\u6CD5\u7684\u503C</li><li>\u9690\u5F0F\u5B9E\u73B0\uFF1A<code>func (t T) IContent() {}</code></li></ul></li><li>\u503C <ul><li>\u53EF\u4EE5\u7528\u4F5C\u51FD\u6570\u7684\u53C2\u6570\u6216\u8FD4\u56DE\u503C</li><li><code>(value, type)</code></li><li>\u7A7A\u63A5\u53E3\u88AB\u7528\u6765\u5904\u7406\u672A\u77E5\u7C7B\u578B\u7684\u503C</li></ul></li><li>\u7C7B\u578B\u65AD\u8A00\uFF1A<code>t, ok := i.(T)</code></li><li>\u7C7B\u578B\u9009\u62E9\uFF1A<code>switch v := i.(type) { }</code></li></ul></li><li>\u5E38\u7528\u63A5\u53E3 <ul><li><code>Stringer</code></li><li><code>Error</code></li><li><code>io.Reader</code></li><li><code>Image</code></li></ul></li></ul>`,24),e=[o];function c(l,u,i,r,k,b){return a(),s("div",null,e)}var f=n(t,[["render",c]]);export{d as __pageData,f as default};
